generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum NotificationDeviceType {
  Web
  Mobile
}

enum NotificationStatus {
  ACTIVE
  EXPIRED
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String   @unique
  name      String
  password  String

  steamUser          SteamUser?
  nft                Nft[]
  notificationTokens NotificationToken[]
}

model SteamUser {
  steamid     String @unique
  personaname String
  profileurl  String
  avatar      String

  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model ResetPasswordToken {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  email String @unique
  token String
}

model Nft {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  url         String
  dbRef       String

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title      String
  body       String?
  created_by String
  status     NotificationStatus @default(ACTIVE)

  notificationToken   NotificationToken @relation(fields: [notificationTokenId], references: [id])
  notificationTokenId String            @db.Uuid
}

model NotificationToken {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  deviceType        NotificationDeviceType
  notificationToken String                 @unique
  status            NotificationStatus     @default(ACTIVE)

  user          User           @relation(fields: [userId], references: [id])
  userId        String         @db.Uuid
  Notifications Notification[]
}
